# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
# jobsの中にタスクを定義。一番下のworkflowのjobsのなかで定義したタスクを使う。
jobs:
  # buildという名前のタスク定義
  build:
    docker:
      # specify the version you desire here
      - image: cimg/ruby:3.2.0-browsers


      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: cimg/mysql:8.0.33
        environment:
          MYSQL_ROOT_PASSWORD: password  # rootのパスワードを指定
          MYSQL_DATABASE: railsapp_test  # テスト用のデータベース名
          MYSQL_HOST: 127.0.0.1          # MySQLのホスト（ローカルホスト）
          MYSQL_PORT: 3306               # MySQLのデフォルトポート

    working_directory: ~/repo

    # 実際の処理内容
    steps:
      - checkout

      # MySQLのクライアントライブラリと依存パッケージのインストール
      - run:
          name: Install MySQL dependencies
          command: sudo apt-get update && sudo apt-get install -y libmysqlclient-dev

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      # runのたびに実行
      - run:
          name: install dependencies
          command: |
            gem install bundler -v 2.0.2
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

       # MySQLが起動するまで待機
      - run:
          name: Wait for MySQL
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 60s

      # Database setup
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      # run tests
      - run:
          name: run tests
          command: |
            DISABLE_SPRING=true bundle exec rails test
            

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

